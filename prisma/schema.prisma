generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model VerificationToken {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String

  @@index([userId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  username      String?   @unique
  bio           String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @updatedAt @map(name: "updated_at")
  accounts      Account[]
  sessions      Session[]

  post    Blog[]
  like    Like[]
  comment Comment[]

  @@map(name: "users")
}

model Blog {
  id        String   @id @default(uuid())
  title     String
  body      String
  imageUrl  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  like    Like[]
  comment Comment[]

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Like {
  id     String @id @default(uuid())
  postId String
  userId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post Blog @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@index([postId, userId])
}

model Comment {
  id       String  @id @default(uuid())
  response String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  blogId String
  blog   Blog   @relation(fields: [blogId], references: [id])

  @@index([userId])
}
